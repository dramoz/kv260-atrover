# --------------------------------------------------------------------------
#function cd_func
# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
cd_func ()
{
  local x2 the_new_dir adir index
  local -i cnt
  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi
  the_new_dir=$1
  [[ -z $1 ]] && the_new_dir=$HOME
  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    adir=$(dirs +$index)
    [[ -z $adir ]] && return 1
    the_new_dir=$adir
  fi
  #
  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
  #
  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)
  #
  # Trim down everything beyond 11th entry
  popd -n +11 2>/dev/null 1>/dev/null
  #
  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 10; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done
  return 0
}
alias cd=cd_func

# --------------------------------------------------------------------------
# bash history ctrl

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100000
HISTFILESIZE=200000

# Ignore case on auto-completion
# Note: bind used instead of sticking these in .inputrc
if [[ $iatest > 0 ]]; then bind "set completion-ignore-case on"; fi

# Show auto-completion list automatically, without double tab
if [[ $iatest > 0 ]]; then bind "set show-all-if-ambiguous On"; fi

#######################################################
# Set command prompt
#######################################################
# http://ezprompt.net/

# Error code of last app run
function nonzero_return() {
    RETVAL=$?
    [ $RETVAL -ne 0 ] && echo "$RETVAL"
}

# get current branch in git repo
function parse_git_branch() {
    BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ ! "${BRANCH}" == "" ]
    then
        STAT=`parse_git_dirty`
        echo "${BRANCH}${STAT}"
    else
        echo ""
    fi
}

# get current status of git repo
function parse_git_dirty {
    status=`git status 2>&1 | tee`
    dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
    untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
    ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
    newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
    renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
    deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
    bits=''
    if [ "${renamed}" == "0" ]; then
        bits=">${bits}"
    fi
    if [ "${ahead}" == "0" ]; then
        bits="*${bits}"
    fi
    if [ "${newfile}" == "0" ]; then
        bits="+${bits}"
    fi
    if [ "${untracked}" == "0" ]; then
        bits="?${bits}"
    fi
    if [ "${deleted}" == "0" ]; then
        bits="x${bits}"
    fi
    if [ "${dirty}" == "0" ]; then
        bits="!${bits}"
    fi
    if [ ! "${bits}" == "" ]; then
        echo " ${bits}"
    else
        echo ""
    fi
}

alias cpu="grep 'cpu ' /proc/stat | awk '{usage=(\$2+\$4)*100/(\$2+\$4+\$5)} END {print usage}' | awk '{printf(\"%.1f\n\", \$1)}'"
function __setprompt
{
    local LAST_COMMAND=$? # Must come first!

    # Define colors
    local LIGHTGRAY="\033[0;37m"
    local WHITE="\033[1;37m"
    local BLACK="\033[0;30m"
    local DARKGRAY="\033[1;30m"
    local RED="\033[0;31m"
    local LIGHTRED="\033[1;31m"
    local GREEN="\033[0;32m"
    local LIGHTGREEN="\033[1;32m"
    local BROWN="\033[0;33m"
    local YELLOW="\033[1;33m"
    local BLUE="\033[0;34m"
    local LIGHTBLUE="\033[1;34m"
    local MAGENTA="\033[0;35m"
    local LIGHTMAGENTA="\033[1;35m"
    local CYAN="\033[0;36m"
    local LIGHTCYAN="\033[1;36m"
    local NOCOLOR="\033[0m"

    # Show error exit code if there is one
    if [[ $LAST_COMMAND != 0 ]]; then
        PS1="\n\[${RED}\]<ERROR:$LAST_COMMAND> \[${LIGHTRED}\]"
        if [[ $LAST_COMMAND == 1 ]]; then
            PS1+="General error or (pytest) Tests were collected and run but some of the tests failed"
        elif [ $LAST_COMMAND == 2 ]; then
            PS1+="Missing keyword, command, permission problem or (pytest) execution interrupted by user"
        elif [ $LAST_COMMAND == 3 ]; then
            PS1+="(pytest) Internal error happened while executing tests"
	elif [ $LAST_COMMAND == 4 ]; then
            PS1+="(pytest) command line usage error"
        elif [ $LAST_COMMAND == 5 ]; then
            PS1+="(pytest) No tests were collected"
        elif [ $LAST_COMMAND == 126 ]; then
            PS1+="Permission problem or command is not an executable"
        elif [ $LAST_COMMAND == 127 ]; then
            PS1+="Command not found"
        elif [ $LAST_COMMAND == 128 ]; then
            PS1+="Invalid argument to exit"
        elif [ $LAST_COMMAND == 129 ]; then
            PS1+="Fatal error signal 1"
        elif [ $LAST_COMMAND == 130 ]; then
            PS1+="Script terminated by Control-C"
        elif [ $LAST_COMMAND == 131 ]; then
            PS1+="Fatal error signal 3"
        elif [ $LAST_COMMAND == 132 ]; then
            PS1+="Fatal error signal 4"
        elif [ $LAST_COMMAND == 133 ]; then
            PS1+="Fatal error signal 5"
        elif [ $LAST_COMMAND == 134 ]; then
            PS1+="Fatal error signal 6"
        elif [ $LAST_COMMAND == 135 ]; then
            PS1+="Fatal error signal 7"
        elif [ $LAST_COMMAND == 136 ]; then
            PS1+="Fatal error signal 8"
        elif [ $LAST_COMMAND == 137 ]; then
            PS1+="Fatal error signal 9"
        elif [ $LAST_COMMAND -gt 255 ]; then
            PS1+="Exit status out of range"
        else
            PS1+="Unknown error code"
        fi
        PS1+="\[${NOCOLOR}\]\n"
    else
        PS1="\n"
    fi
    
    # Git
    PS1+="\[${LIGHTGREEN}\][git:\`parse_git_branch\`]"
    
    # CPU
    PS1+="\[${CYAN}\](CPU $(cpu)%)"
    
    # uptime
    uptime=`uptime`
    #IFS=','; arrUptime=($uptime); unset IFS;
    PS1+="\[${DARKGRAY}\]$uptime"
    
    # Network Connections (for a server - comment out for non-server)
    #PS1+="\[${DARKGRAY}\]:\[${MAGENTA}\]Net $(awk 'END {print NR}' /proc/net/tcp)"
    
    # Conda
    PS1+="\n"
    PS1+="\[${WHITE}\]($(basename "$VIRTUAL_ENV")) "
    
    # User and server
    PS1+="\[${GREEN}\]\h:"
    #local SSH_IP=`echo $SSH_CLIENT | awk '{ print $1 }'`
    #local SSH2_IP=`echo $SSH2_CLIENT | awk '{ print $1 }'`
    #if [ $SSH2_IP ] || [ $SSH_IP ] ; then
    #    PS1+="\[${BLUE}\]\u@\h:"
    #else
    #    PS1+="\[${BLUE}\]\u:"
    #fi

    # Current directory
    PS1+="\[${BROWN}\]\w/"

    # Total size of files in current directory
    #PS1+="(\[${GREEN}\]$(/bin/ls -lah | /bin/grep -m 1 total | /bin/sed 's/total //')\[${DARKGRAY}\]:"

    # Number of files
    #PS1+="\[${GREEN}\]\$(/bin/ls -A -1 | /usr/bin/wc -l)\[${DARKGRAY}\])"
    
    #PS1+="\n"
    #PS1+="Colors: \[${LIGHTGRAY}\] LIGHTGRAY \[${WHITE}\] WHITE \[${BLACK}\] BLACK \[${DARKGRAY}\] DARKGRAY \[${RED}\] RED \[${LIGHTRED}\] LIGHTRED \[${GREEN}\] GREEN \[${LIGHTGREEN}\] LIGHTGREEN \[${BROWN}\] BROWN \[${YELLOW}\] YELLOW \[${BLUE}\] BLUE \[${LIGHTBLUE}\] LIGHTBLUE \[${MAGENTA}\] MAGENTA \[${LIGHTMAGENTA}\] LIGHTMAGENTA \[${CYAN}\] CYAN \[${LIGHTCYAN}\] LIGHTCYAN \[${NOCOLOR}\] NOCOLOR \n"
    
    if [[ $EUID -ne 0 ]]; then
        PS1+="\[${GREEN}\]$\[${NOCOLOR}\] " # Normal user
    else
        PS1+="\[${RED}\]$\[${NOCOLOR}\] " # Root user
    fi
    
    #PS1="${CONDA_PROMPT_MODIFIER}[git:\[\e[m\]\[\e[35m\]\`parse_git_branch\`\[\e[m\]\[\e[35m\]]\[\e[m\]\[\e[31m\][err:\[\e[m\]\[\e[31m\]\`nonzero_return\`\[\e[m\]\[\e[31m\]]\\n\[\e[32m\]\h\[\e[m\]\[\e[32m\]:\[\e[m\]\[\e[33m\]\w\[\e[m\]\[\e[33m\]/\[\e[m\]\[\e[35m\]\[\e[m\]\[\e[36m\]\\$\[\e[m\] "
    
    # PS2 is used to continue a command using the \ character
    PS2="\[${LIGHTGRAY}\]>\[${NOCOLOR}\] "

    # PS3 is used to enter a number choice in a script
    PS3='Please enter a number from above list: '

    # PS4 is used for tracing a script in debug mode
    PS4='\[${DARKGRAY}\]+\[${NOCOLOR}\] '
}
PROMPT_COMMAND='__setprompt'

###############################################
# Load other aliases
if [ -f "${HOME}/.bash_aliases" ]; then
    source "${HOME}/.bash_aliases"
fi
